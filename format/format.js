window.storyFormat({
	"name": "Harrow",
	"version": "0.1.0",
	"source": "<!DOCTYPE html><html><head><meta name="viewport" content="width=device-width, initial-scale=1"><meta charset="utf-8"/><title>{{STORY_NAME}}</title><style>html {	display: grid;	height: 100%;	font-size: 100%;	font-size: 22px;}body {	color: rgba(50,50,50,1);	font-family: Georgia;	background: #ffffff;	background-image: linear-gradient(135deg, #f7f7f7, #ffffff); transition: 0.5s background ease; overflow: auto;	scroll-behavior: smooth;}page {	display: grid;	width: 32%;	height: 96%;	min-width: 380px;	min-height: 0;	grid-template-rows: auto 1fr auto;	gap: 8px;	position: absolute;	top: 0; bottom: 0; left: 0; right: 0;	margin: auto;	border-radius: 16px;	background: #ffffff;}@media screen and (max-width: 600px) {	page { width: 100%; height: 100%;	}}header {	padding: 2em 2em;	color: var(--header);}header hr {	color: #444;	border: 1px solid #ffffff;	border-color: var(--header);	opacity: 0.9;}article {	padding: 1em 2em;	overflow: auto;	scroll-behavior: smooth;	color: #333333;}footer {	padding: 1em;}options {	float: right;	cursor: pointer;}/* Textbox */h2 {	font-size: 1.75rem;	margin-top: 1.5rem;}article p {	font-size: 1.2rem;	line-height: 1.5;	font-weight: 500;	margin-top: 1.25rem;	max-width: 30em;}/* Dialogue */button { padding: 20px 128px; border-style: none; border-radius: 10px; font-family: Georgia, sans-serif; font-weight: 500; font-style: normal; font-size: .875em; line-height: 1.5; color: #ececec; background-color: #222222; cursor: pointer;	display: block;	margin: 10px auto 0;	text-align: center;	width: 100%;}button::last-child {	margin: 10px auto 0;} </style></head><body> {{STORY_DATA}} <page><header><chapter>Chapter</chapter><options>Restart</options></header><article></article><footer></footer></page></body><script src="https://code.jquery.com/jquery-3.1.0.min.js"></script><script>// Generated by Haxe 4.3.4(function ($global) { "use strict";function $extend(from, fields) {	var proto = Object.create(from);	for (var name in fields) proto[name] = fields[name];	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;	return proto;}var App = function() {	var _gthis = this;	var storydata = window.document.querySelector("tw-storydata");	var startnode = storydata.getAttribute("startnode");	var source = storydata.children;	var entry = "";	var _g = 0;	while(_g < source.length) { var route = source[_g]; ++_g; var name = route.getAttribute("name"); var pid = route.getAttribute("pid"); if(name != null) { entry += "#" + name + "\n"; if(pid == startnode) { startnode = name; } var content = route.innerHTML.split("\n"); var _g1 = 0; while(_g1 < content.length) { var line = content[_g1]; ++_g1; var string = StringTools.trim(line); var lead = string.substring(0,1); var link = string.substring(0,2); if(lead == "-") { string = StringTools.replace(string,"[[",""); string = StringTools.replace(string,"]]",""); } if(link == "[[") { string = StringTools.replace(string,"[[",""); string = StringTools.replace(string,"]]",""); string = "[move " + string + "]"; } string = StringTools.replace(string,"&lt;","<"); string = StringTools.replace(string,"&gt;",">"); entry += string + "\n"; } }	}	Library.COLON = ":";	this.story = Library.get(entry);	this.story.move(startnode);	this.novel = new Runtime(this.story);	this.novel.onText = $bind(this,this.onText);	this.novel.onDialogue = $bind(this,this.onDialogue);	this.novel.onEnd = $bind(this,this.onEnd);	window.document.querySelector("chapter").innerHTML = storydata.getAttribute("name");	this.textbox = window.document.querySelector("article");	var container = window.document.querySelector("footer");	this.dialogue = window.document.createElement("div");	container.appendChild(this.dialogue);	this.button = window.document.createElement("button");	container.appendChild(this.button);	this.button.textContent = "Continue";	this.button.onclick = function(event) { _gthis.onClick();	};	var restart = window.document.querySelector("options");	restart.onclick = function(event) { $global.location.reload();	};	this.novel.nextPage();};App.__name__ = true;App.main = function() {	App.ME = new App();};App.prototype = {	onClick: function() { this.button.style.display = "none"; this.novel.nextPage();	}	,onText: function(text,name) { this.textbox.innerHTML = "<p>" + text + "</p>"; this.textbox.style.opacity = "0"; $(this.textbox).fadeTo(300,1); this.button.style.display = "block";	}	,onDialogue: function(choices) { var _gthis = this; var _g = 0; while(_g < choices.length) { var entry = [choices[_g]]; ++_g; var choice = window.document.createElement("button"); choice.textContent = entry[0].text; choice.className = "choice"; choice.onclick = (function(entry) { return function(event) { _gthis.onSelect(entry[0].type,entry[0].data); }; })(entry); this.dialogue.appendChild(choice); }	}	,onSelect: function(type,data) { this.textbox.innerHTML = ""; this.dialogue.innerHTML = ""; this.novel.onChoice(type,data);	}	,onEnd: function() { this.textbox.innerHTML = "<p>Story End</p>"; $(this.textbox).fadeTo(300,1);	}};var EReg = function(r,opt) {	this.r = new RegExp(r,opt.split("u").join(""));};EReg.__name__ = true;EReg.prototype = {	match: function(s) { if(this.r.global) { this.r.lastIndex = 0; } this.r.m = this.r.exec(s); this.r.s = s; return this.r.m != null;	}	,matched: function(n) { if(this.r.m != null && n >= 0 && n < this.r.m.length) { return this.r.m[n]; } else { throw haxe_Exception.thrown("EReg::matched"); }	}	,matchedPos: function() { if(this.r.m == null) { throw haxe_Exception.thrown("No string matched"); } return { pos : this.r.m.index, len : this.r.m[0].length};	}	,matchSub: function(s,pos,len) { if(len == null) { len = -1; } if(this.r.global) { this.r.lastIndex = pos; this.r.m = this.r.exec(len < 0 ? s : HxOverrides.substr(s,0,pos + len)); var b = this.r.m != null; if(b) { this.r.s = s; } return b; } else { var b = this.match(len < 0 ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len)); if(b) { this.r.s = s; this.r.m.index += pos; } return b; }	}	,map: function(s,f) { var offset = 0; var buf_b = ""; do { if(offset >= s.length) { break; } else if(!this.matchSub(s,offset)) { buf_b += Std.string(HxOverrides.substr(s,offset,null)); break; } var p = this.matchedPos(); buf_b += Std.string(HxOverrides.substr(s,offset,p.pos - offset)); buf_b += Std.string(f(this)); if(p.len == 0) { buf_b += Std.string(HxOverrides.substr(s,p.pos,1)); offset = p.pos + 1; } else { offset = p.pos + p.len; } } while(this.r.global); if(!this.r.global && offset > 0 && offset < s.length) { buf_b += Std.string(HxOverrides.substr(s,offset,null)); } return buf_b;	}};var HxOverrides = function() { };HxOverrides.__name__ = true;HxOverrides.cca = function(s,index) {	var x = s.charCodeAt(index);	if(x != x) { return undefined;	}	return x;};HxOverrides.substr = function(s,pos,len) {	if(len == null) { len = s.length;	} else if(len < 0) { if(pos == 0) { len = s.length + len; } else { return ""; }	}	return s.substr(pos,len);};HxOverrides.now = function() {	return Date.now();};Math.__name__ = true;var Std = function() { };Std.__name__ = true;Std.string = function(s) {	return js_Boot.__string_rec(s,"");};Std.parseInt = function(x) {	var v = parseInt(x);	if(isNaN(v)) { return null;	}	return v;};var StringTools = function() { };StringTools.__name__ = true;StringTools.isSpace = function(s,pos) {	var c = HxOverrides.cca(s,pos);	if(!(c > 8 && c < 14)) { return c == 32;	} else { return true;	}};StringTools.ltrim = function(s) {	var l = s.length;	var r = 0;	while(r < l && StringTools.isSpace(s,r)) ++r;	if(r > 0) { return HxOverrides.substr(s,r,l - r);	} else { return s;	}};StringTools.rtrim = function(s) {	var l = s.length;	var r = 0;	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;	if(r > 0) { return HxOverrides.substr(s,0,l - r);	} else { return s;	}};StringTools.trim = function(s) {	return StringTools.ltrim(StringTools.rtrim(s));};StringTools.replace = function(s,sub,by) {	return s.split(sub).join(by);};var Choice = function() {	this.role = "empty";	this.data = "empty";	this.text = "empty";	this.type = "empty";};Choice.__name__ = true;var Dialogue = function() { };Dialogue.__name__ = true;Dialogue.get = function(entry) {	var map = entry.split(Library.LINE);	var choices = [];	var _g = 0;	var _g1 = map.length;	while(_g < _g1) { var i = _g++; var key = map[i].split(Library.ITEM); var choice = new Choice(); choice.text = key[0]; choice.type = key[1]; choice.data = key[2]; choice.role = key[3]; choices.push(choice);	}	return choices;};var Format = function() { };Format.__name__ = true;Format.variable = function(entry) {	if(entry.indexOf("[") == -1) { return entry;	}	var rex = new EReg("\\[(.*?)\\]","gi");	entry = rex.map(entry,function(r) { var matching = r.matched(0); var variable = matching.substring(1,matching.length - 1); if(Storage.has(variable)) { return Storage.get(variable); } return matching;	});	return entry;};var Library = function() { };Library.__name__ = true;Library.get = function(entry) {	var res = entry.split(Library.LF);	var story = new Story();	var line = 0;	while(line < res.length) { var node = Library.getNode(res,line); if(node != null && node.type != Library.EMPTY) { var page = new Page(); page.type = node.type; page.text = node.text; page.data = node.data; story.data.push(page); line += node.depth; } ++line;	}	return story;};Library.getNode = function(res,page) {	var string = StringTools.trim(res[page]);	if(string.length == 0) { return null;	}	var node = new Node();	var type = "text";	var leading = string.substring(0,1);	if(leading == "#") { type = "route";	}	if(leading == ":") { type = "label";	}	if(leading == "-") { type = "dialogue";	}	if(leading == "[") { type = Library.isEvent(string);	}	if(leading == "/") { type = Library.EMPTY;	}	if(Library.isBreak(string)) { type = "break";	}	node.type = type;	if(type == "text") { Library.getText(node,string);	}	if(type == "label") { var label = StringTools.replace(string,":",""); node.text = StringTools.trim(label);	}	if(type == "route") { var route = StringTools.replace(string,"#",""); node.text = StringTools.trim(route);	}	if(type == "dialogue") { Library.getDialogue(node,res,page);	}	if(type == "event") { Library.getEvent(node,string);	}	return node;};Library.getText = function(node,res) {	var raw = StringTools.replace(res,Library.COLON,Library.LINE);	var key = raw.split(Library.KEY);	node.text = StringTools.trim(key.pop());	node.text = StringTools.replace(node.text,Library.LINE,Library.KEY);	node.data = key.length > 0 ? StringTools.trim(key[Library.TYPE]) : "";};Library.getDialogue = function(node,res,indent) {	var dialogue = [];	var _g = indent;	var _g1 = res.length;	while(_g < _g1) { var page = _g++; var sampled = StringTools.trim(res[page]); var allowed = sampled.substring(0,2) != Library.DASH + Library.DASH; var leading = sampled.substring(0,1); if(leading == Library.DASH && allowed) { dialogue.push(res[page]); } else { break; }	}	var content = "";	var string = "";	var _g = 0;	var _g1 = dialogue.length;	while(_g < _g1) { var i = _g++; string = dialogue[i]; string = StringTools.replace(string,Library.DASH,""); string = Library.getDialogueItem(string); var divider = Library.LINE; if(i == dialogue.length - 1) { divider = ""; } content = content + string + divider;	}	node.text = content;	node.depth = dialogue.length - 1;};Library.getDialogueItem = function(res) {	var key = res.split(Library.KEY);	var text = StringTools.trim(key[Library.TYPE]);	var type = "empty";	var data = "empty";	var role = "empty";	if(key.length > 1) { var string = StringTools.trim(key[Library.TEXT]); string = StringTools.replace(string,Library.SPACE,Library.KEY); var prop = string.split(Library.KEY); if(Library.isVariable(prop[Library.TEXT])) { type = "variable"; data = string; } else { type = "route"; data = StringTools.trim(key[Library.TEXT]); }	}	if(key.length > 2) { role = StringTools.trim(key[Library.DATA]); role = StringTools.replace(role,Library.SPACE,Library.KEY);	}	return text + Library.ITEM + type + Library.ITEM + data + Library.ITEM + role;};Library.getEvent = function(node,res) {	var string = res.substring(1,res.length - 1);	string = StringTools.trim(string);	string = StringTools.replace(string,Library.COMA + Library.SPACE,Library.COMA);	string = StringTools.replace(string,Library.SPACE + Library.SPACE,Library.KEY);	string = StringTools.replace(string,Library.SPACE,Library.KEY);	var key = string.split(Library.KEY);	var type = key[Library.TYPE];	node.type = "event";	node.text = StringTools.replace(string,type + ":","");	node.data = type;	if(type == "move") { node.type = "move"; node.text = StringTools.replace(string,"move:",""); node.text = StringTools.replace(node.text,Library.KEY,Library.SPACE);	}	if(type == "story") { node.type = "move"; node.text = StringTools.replace(string,"story:",""); node.text = StringTools.replace(node.text,Library.KEY,Library.SPACE);	}	if(type == "lock") { node.type = "move"; node.text = type;	}	if(type == "if") { node.type = "condition"; node.text = StringTools.replace(string,"if:","");	}	if(type == "else" || type == "end") { node.type = "condition"; node.text = type;	}	if(Library.isVariable(key[Library.TEXT])) { node.type = "variable"; node.text = string;	}};Library.isBreak = function(entry) {	var leading = entry.substring(0,2);	if(leading == Library.DASH + Library.DASH) { return true;	}	return false;};Library.isEvent = function(entry) {	if(entry.indexOf("]") != entry.length - 1) { return "text";	}	return "event";};Library.isVariable = function(entry) {	if(entry == "=" || entry == "+" || entry == "-" || entry == "*" || entry == "/") { return true;	}	if(entry == "roll" || entry == "chance" || entry == "delete") { return true;	}	return false;};var Node = function() {	this.depth = 0;	this.data = "";	this.text = "";	this.type = "";};Node.__name__ = true;var Random = function() {};Random.__name__ = true;Random.prototype = {	chance: function(entry) { return this.roll(0,100) < Std.parseInt(entry);	}	,dice: function(entry) { return this.roll(1,Std.parseInt(entry));	}	,roll: function(min,max) { return min + Math.floor((max - min + 1) * Math.random());	}};var Logic = function() { };Logic.__name__ = true;Logic.variable = function(entry) {	var key = entry.split(Library.KEY);	var name = key.shift();	var type = key.shift();	var prop = key.join(Library.SPACE);	if(type != null) { switch(type) { case "*": var a = parseFloat(Logic.get(name)); var b = parseFloat(Logic.get(prop)); Logic.set(name,Std.string(a * b)); break; case "+": var a = parseFloat(Logic.get(name)); var b = parseFloat(Logic.get(prop)); Logic.set(name,Std.string(a + b)); break; case "-": var a = parseFloat(Logic.get(name)); var b = parseFloat(Logic.get(prop)); Logic.set(name,Std.string(a - b)); break; case "/": var a = parseFloat(Logic.get(name)); var b = parseFloat(Logic.get(prop)); Logic.set(name,Std.string(a / b)); break; case "=": Logic.set(name,Logic.get(prop)); break; case "chance": var prob = Logic.random.chance(Logic.get(prop)); Logic.set(name,prob == null ? "null" : "" + prob); break; case "roll": var roll = Logic.random.dice(Logic.get(prop)); Logic.set(name,roll == null ? "null" : "" + roll); break; default: }	}};Logic.condition = function(entry) {	if(entry == "else") { return false;	}	if(entry == "end") { return true;	}	var key = entry.split(Library.KEY);	var name = key.shift();	var type = key.shift();	var prop = key.join(Library.SPACE);	var result = false;	if(type != null) { switch(type) { case "<": var a = parseFloat(Logic.get(name)); var b = parseFloat(Logic.get(prop)); result = a < b; break; case "=": result = Logic.get(name) == Logic.get(prop); break; case ">": var a = parseFloat(Logic.get(name)); var b = parseFloat(Logic.get(prop)); result = a > b; break; case "chance": result = Logic.random.chance(Logic.get(prop)); break; case "is": result = Logic.get(name) == Logic.get(prop); break; default: }	}	return result;};Logic.get = function(entry) {	if(entry == "false" || entry == "true") { return entry;	}	if(Storage.has(entry)) { return Storage.get(entry);	}	return entry;};Logic.set = function(entry,value) {	Storage.set(entry,value);};var Page = function() {	this.data = "";	this.text = "";	this.type = "";};Page.__name__ = true;var Runtime = function(entry) {	this.story = entry;};Runtime.__name__ = true;Runtime.prototype = {	nextPage: function() { if(this.story.get_end()) { this.onEnd(); } if(this.story.get_end()) { return; } this.page = this.story.next(); this.onPage(this.page); switch(this.page.type) { case "condition": var condition = Logic.condition(this.page.text); if(condition == false) { this.story.skip(); } this.nextPage(); break; case "dialogue": var dialogue = Dialogue.get(this.page.text); var _g = 0; while(_g < dialogue.length) { var choice = dialogue[_g]; ++_g; choice.text = Format.variable(choice.text); } this.onDialogue(dialogue); break; case "event": this.gameEvent(); break; case "label": break; case "move": if(this.page.data == "story") { this.onStory(this.page.text); } if(this.page.data == "move") { this.story.move(this.page.text); this.nextPage(); } break; case "route": this.nextPage(); break; case "text": var text = Format.variable(this.page.text); this.onText(text,this.page.data); break; case "variable": Logic.variable(this.page.text); this.nextPage(); break; default: }	}	,gameEvent: function() { switch(this.page.data) { case "transition": this.onTransition(); break; case "wait": var time = Std.parseInt(this.page.text); haxe_Timer.delay($bind(this,this.nextPage),time * 60); break; default: this.onEvent(this.page.data,this.page.text); this.nextPage(); }	}	,onChoice: function(type,data) { if(type == "route") { this.story.move(data); } if(type == "variable") { Logic.variable(data); } this.nextPage();	}	,onPage: function(page) {	}	,onText: function(text,name) {	}	,onDialogue: function(dialogue) {	}	,onEvent: function(type,data) {	}	,onTransition: function() {	}	,onStory: function(name) {	}	,onEnd: function() {	}};var haxe_ds_StringMap = function() {	this.h = Object.create(null);};haxe_ds_StringMap.__name__ = true;var Storage = function() { };Storage.__name__ = true;Storage.get = function(key) {	return Storage.variable.h[key];};Storage.set = function(key,value) {	Storage.variable.h[key] = value;};Storage.has = function(key) {	return Object.prototype.hasOwnProperty.call(Storage.variable.h,key);};var Story = function() {	this.page = -1;	this.data = [];};Story.__name__ = true;Story.prototype = {	next: function() { if(this.page < this.data.length) { this.page += 1; } return this.data[this.page];	}	,move: function(route) { var _g = 0; var _g1 = this.data.length; while(_g < _g1) { var i = _g++; if(this.data[i].type == "route" && this.data[i].text == route) { return this.page = i; } } return this.page;	}	,skip: function() { var position = this.page + 1; var _g = position; var _g1 = this.data.length; while(_g < _g1) { var i = _g++; if(this.data[i].type == "condition") { if(this.data[i].text == "end" || this.data[i].text == "else") { return this.page = i; } } } return this.page;	}	,get_end: function() { return this.page == this.data.length - 1;	}};var haxe_Exception = function(message,previous,native) {	Error.call(this,message);	this.message = message;	this.__previousException = previous;	this.__nativeException = native != null ? native : this;};haxe_Exception.__name__ = true;haxe_Exception.thrown = function(value) {	if(((value) instanceof haxe_Exception)) { return value.get_native();	} else if(((value) instanceof Error)) { return value;	} else { var e = new haxe_ValueException(value); return e;	}};haxe_Exception.__super__ = Error;haxe_Exception.prototype = $extend(Error.prototype,{	get_native: function() { return this.__nativeException;	}});var haxe_Timer = function(time_ms) {	var me = this;	this.id = setInterval(function() { me.run();	},time_ms);};haxe_Timer.__name__ = true;haxe_Timer.delay = function(f,time_ms) {	var t = new haxe_Timer(time_ms);	t.run = function() { t.stop(); f();	};	return t;};haxe_Timer.prototype = {	stop: function() { if(this.id == null) { return; } clearInterval(this.id); this.id = null;	}	,run: function() {	}};var haxe_ValueException = function(value,previous,native) {	haxe_Exception.call(this,String(value),previous,native);	this.value = value;};haxe_ValueException.__name__ = true;haxe_ValueException.__super__ = haxe_Exception;haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{});var haxe_iterators_ArrayIterator = function(array) {	this.current = 0;	this.array = array;};haxe_iterators_ArrayIterator.__name__ = true;haxe_iterators_ArrayIterator.prototype = {	hasNext: function() { return this.current < this.array.length;	}	,next: function() { return this.array[this.current++];	}};var js_Boot = function() { };js_Boot.__name__ = true;js_Boot.__string_rec = function(o,s) {	if(o == null) { return "null";	}	if(s.length >= 5) { return "<...>";	}	var t = typeof(o);	if(t == "function" && (o.__name__ || o.__ename__)) { t = "object";	}	switch(t) {	case "function": return "<function>";	case "object": if(((o) instanceof Array)) { var str = "["; s += "\t"; var _g = 0; var _g1 = o.length; while(_g < _g1) { var i = _g++; str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s); } str += "]"; return str; } var tostr; try { tostr = o.toString; } catch( _g ) { return "???"; } if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") { var s2 = o.toString(); if(s2 != "[object Object]") { return s2; } } var str = "{\n"; s += "\t"; var hasp = o.hasOwnProperty != null; var k = null; for( k in o ) { if(hasp && !o.hasOwnProperty(k)) { continue; } if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") { continue; } if(str.length != 2) { str += ", \n"; } str += s + k + " : " + js_Boot.__string_rec(o[k],s); } s = s.substring(1); str += "\n" + s + "}"; return str;	case "string": return o;	default: return String(o);	}};var $_;function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }$global.$haxeUID |= 0;if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {	HxOverrides.now = performance.now.bind(performance);}String.__name__ = true;Array.__name__ = true;js_Boot.__toStr = ({ }).toString;Library.LF = "\n";Library.EMPTY = "";Library.SPACE = " ";Library.COLON = "::";Library.LINE = "|";Library.ITEM = "::";Library.COMA = ",";Library.DASH = "-";Library.KEY = ":";Library.TYPE = 0;Library.TEXT = 1;Library.DATA = 2;Logic.random = new Random();Storage.variable = new haxe_ds_StringMap();App.main();})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);	</script></html>",
	"description": "Harrow story format"
 });